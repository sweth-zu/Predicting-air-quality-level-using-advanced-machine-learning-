import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

Load the dataset

Replace with your actual dataset path

data = pd.read_csv('air_quality_data.csv')

Basic data overview

print(data.info()) print(data.describe())

Check for missing values

print(data.isna().sum())

data.dropna(inplace=True)  # Remove rows with missing values

Feature and target separation

X = data.drop(columns=['AQI'])  # Use all columns except 'AQI' as features y = data['AQI']

Train-test split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Feature scaling

scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)

Model training

model = RandomForestRegressor(n_estimators=100, random_state=42) model.fit(X_train, y_train)

Model prediction

predictions = model.predict(X_test)

Evaluation

mse = mean_squared_error(y_test, predictions) mae = mean_absolute_error(y_test, predictions) r2 = r2_score(y_test, predictions)

print(f"MSE: {mse:.2f}") print(f"MAE: {mae:.2f}") print(f"R2 Score: {r2:.2f}")

Feature importance

importances = model.feature_importances_ features = X.columns

plt.figure(figsize=(12, 8)) sns.barplot(x=importances, y=features) plt.title('Feature Importance') plt.show()

Save the model for future use

import joblib joblib.dump(model, 'air_quality_model.pkl')

